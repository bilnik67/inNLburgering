{"version":3,"names":["BottomTabBarItem","focused","route","label","icon","badge","badgeStyle","to","button","children","style","onPress","accessibilityRole","rest","Platform","OS","styles","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","accessibilityLabel","testID","onLongPress","horizontal","activeTintColor","customActiveTintColor","inactiveTintColor","customInactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","allowFontScaling","labelStyle","iconStyle","colors","useTheme","undefined","primary","Color","text","mix","card","hex","renderLabel","color","labelBeside","labelBeneath","position","renderIcon","activeOpacity","inactiveOpacity","scene","backgroundColor","select","ios","default","accessibilityState","selected","accessibilityStates","tab","tabLandscape","tabPortrait","StyleSheet","create","flex","alignItems","justifyContent","flexDirection","textAlign","fontSize","marginLeft","marginTop","display"],"sources":["BottomTabItem.tsx"],"sourcesContent":["import { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport React from 'react';\nimport {\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\nimport TabBarIcon from './TabBarIcon';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <Pressable\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n          style={style}\n        >\n          {children}\n        </Pressable>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    // FIXME: accessibilityRole: 'tab' doesn't seem to work as expected on iOS\n    accessibilityRole: Platform.select({ ios: 'button', default: 'tab' }),\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"],"mappings":"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"}